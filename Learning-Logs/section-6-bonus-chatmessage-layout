Certainly, Zack! Updating your app to use `UITableView` will make it much more versatile and user-friendly, especially if you're aiming for an iMessage-like experience. It's a perfect project to level up your Swift and UIKit skills, too. Here's a step-by-step plan for converting your existing setup to a chat interface with `UITableView`.

### Step 1: Remove Unused Elements

First, remove `chatHistory` and `chatLabel` from your storyboard and code, as we won't be using them anymore.

### Step 2: Add UITableView to Storyboard and ViewController

1. Drag a `UITableView` into your ViewController in the storyboard.
2. Control-drag from the `UITableView` to your ViewController code to create an IBOutlet for it. Name it `chatTableView`.
  
Your ViewController should now look something like:

```swift
import UIKit

class ViewController: UIViewController {

    @IBOutlet weak var chatTableView: UITableView!
  
    override func viewDidLoad() {
        super.viewDidLoad()
        // Initialization code here
    }
}
```

### Step 3: Create a Custom UITableViewCell

1. Create a new Swift file, name it `ChatTableViewCell.swift`.
2. Create a class in it that inherits from `UITableViewCell`.

Here is the `ChatTableViewCell` with two labelsâ€”one for the user's messages and one for the bot's messages:

```swift
import UIKit

class ChatTableViewCell: UITableViewCell {
    @IBOutlet weak var userMessageLabel: UILabel!
    @IBOutlet weak var botMessageLabel: UILabel!
}
```

### Step 4: Configure UITableView

You'll need to conform to the `UITableViewDataSource` and `UITableViewDelegate` protocols.

```swift
// Add UITableViewDataSource, UITableViewDelegate
class ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {
    
    @IBOutlet weak var chatTableView: UITableView!
    
    // Create a placeholder for chat history
    var chatHistory: [(String, String)] = [] // (User Message, Bot Message)
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        chatTableView.delegate = self
        chatTableView.dataSource = self
        
        // Register custom cell
        chatTableView.register(UINib(nibName: "ChatTableViewCell", bundle: nil), forCellReuseIdentifier: "ChatCell")
        
        // Fetch chat data
        fetchChatHistory(conversationID: 1)
    }
    
    // Implement the data source methods
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return chatHistory.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "ChatCell", for: indexPath) as! ChatTableViewCell
        let (userMessage, botMessage) = chatHistory[indexPath.row]
        cell.userMessageLabel.text = userMessage
        cell.botMessageLabel.text = botMessage
        return cell
    }
}
```

### Step 5: Update Fetch Method

Update your `fetchChatHistory` method to populate `chatHistory` and reload the `UITableView`.

```swift
func fetchChatHistory(conversationID: Int) {
    // Your API fetching code here
    
    // After successfully fetching:
    DispatchQueue.main.async {
        self.chatTableView.reloadData()
    }
}
```

### Step 6: Design the Cell

You can design your `ChatTableViewCell` in the Interface Builder to make it look like iMessage. For instance, use rounded rectangles for message backgrounds, different colors for user and bot messages, and so on.

Now, with this setup, your chat history should be displayed in a much more interactive and visually pleasing way. How does that sound for a next step, Zack? Would you like more detailed guidance on any of these steps?